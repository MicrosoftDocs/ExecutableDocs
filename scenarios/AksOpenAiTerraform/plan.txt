Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_federated_identity_credential.federated_identity_credential will be created
  + resource "azurerm_federated_identity_credential" "federated_identity_credential" {
      + audience            = [
          + "api://AzureADTokenExchange",
        ]
      + id                  = (known after apply)
      + issuer              = (known after apply)
      + name                = "Magic8ballFederatedIdentity"
      + parent_id           = (known after apply)
      + resource_group_name = (known after apply)
      + subject             = "system:serviceaccount:magic8ball:magic8ball-sa"
    }

  # azurerm_resource_group.rg will be created
  + resource "azurerm_resource_group" "rg" {
      + id       = (known after apply)
      + location = "westus3"
      + name     = (known after apply)
    }

  # azurerm_role_assignment.acr_pull_assignment will be created
  + resource "azurerm_role_assignment" "acr_pull_assignment" {
      + condition_version                = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "AcrPull"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # azurerm_role_assignment.cognitive_services_user_assignment will be created
  + resource "azurerm_role_assignment" "cognitive_services_user_assignment" {
      + condition_version                = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Cognitive Services User"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # azurerm_role_assignment.network_contributor_assignment will be created
  + resource "azurerm_role_assignment" "network_contributor_assignment" {
      + condition_version                = (known after apply)
      + id                               = (known after apply)
      + name                             = (known after apply)
      + principal_id                     = (known after apply)
      + principal_type                   = (known after apply)
      + role_definition_id               = (known after apply)
      + role_definition_name             = "Network Contributor"
      + scope                            = (known after apply)
      + skip_service_principal_aad_check = (known after apply)
    }

  # azurerm_user_assigned_identity.aks_workload_identity will be created
  + resource "azurerm_user_assigned_identity" "aks_workload_identity" {
      + client_id           = (known after apply)
      + id                  = (known after apply)
      + location            = "westus3"
      + name                = "WorkloadManagedIdentity"
      + principal_id        = (known after apply)
      + resource_group_name = (known after apply)
      + tenant_id           = (known after apply)
    }

  # random_string.rg_suffix will be created
  + resource "random_string" "rg_suffix" {
      + id          = (known after apply)
      + length      = 6
      + lower       = false
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # random_string.storage_account_suffix will be created
  + resource "random_string" "storage_account_suffix" {
      + id          = (known after apply)
      + length      = 8
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = false
      + numeric     = false
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # module.acr_private_dns_zone.azurerm_private_dns_zone.private_dns_zone will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.azurecr.io"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = (known after apply)

      + soa_record (known after apply)
    }

  # module.acr_private_dns_zone.azurerm_private_dns_zone_virtual_network_link.link["AksVNet"] will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "link" {
      + id                    = (known after apply)
      + name                  = "link_to_aksvnet"
      + private_dns_zone_name = "privatelink.azurecr.io"
      + registration_enabled  = false
      + resource_group_name   = (known after apply)
      + virtual_network_id    = (known after apply)
    }

  # module.acr_private_endpoint.azurerm_private_endpoint.private_endpoint will be created
  + resource "azurerm_private_endpoint" "private_endpoint" {
      + custom_dns_configs       = (known after apply)
      + id                       = (known after apply)
      + location                 = "westus3"
      + name                     = "AcrPrivateEndpoint"
      + network_interface        = (known after apply)
      + private_dns_zone_configs = (known after apply)
      + resource_group_name      = (known after apply)
      + subnet_id                = (known after apply)

      + private_dns_zone_group {
          + id                   = (known after apply)
          + name                 = "AcrPrivateDnsZoneGroup"
          + private_dns_zone_ids = (known after apply)
        }

      + private_service_connection {
          + is_manual_connection           = false
          + name                           = "AcrPrivateEndpointConnection"
          + private_connection_resource_id = (known after apply)
          + private_ip_address             = (known after apply)
          + subresource_names              = [
              + "registry",
            ]
        }
    }

  # module.aks_cluster.azurerm_kubernetes_cluster.aks_cluster will be created
  + resource "azurerm_kubernetes_cluster" "aks_cluster" {
      + automatic_upgrade_channel           = "stable"
      + azure_policy_enabled                = true
      + current_kubernetes_version          = (known after apply)
      + dns_prefix                          = "akscluster"
      + fqdn                                = (known after apply)
      + http_application_routing_enabled    = false
      + http_application_routing_zone_name  = (known after apply)
      + id                                  = (known after apply)
      + image_cleaner_enabled               = true
      + image_cleaner_interval_hours        = 72
      + kube_admin_config                   = (sensitive value)
      + kube_admin_config_raw               = (sensitive value)
      + kube_config                         = (sensitive value)
      + kube_config_raw                     = (sensitive value)
      + kubernetes_version                  = "1.30.7"
      + location                            = "westus3"
      + name                                = "AksCluster"
      + node_os_upgrade_channel             = "NodeImage"
      + node_resource_group                 = (known after apply)
      + node_resource_group_id              = (known after apply)
      + oidc_issuer_enabled                 = true
      + oidc_issuer_url                     = (known after apply)
      + open_service_mesh_enabled           = true
      + portal_fqdn                         = (known after apply)
      + private_cluster_enabled             = false
      + private_cluster_public_fqdn_enabled = false
      + private_dns_zone_id                 = (known after apply)
      + private_fqdn                        = (known after apply)
      + resource_group_name                 = (known after apply)
      + role_based_access_control_enabled   = true
      + run_command_enabled                 = true
      + sku_tier                            = "Free"
      + support_plan                        = "KubernetesOfficial"
      + workload_identity_enabled           = true

      + auto_scaler_profile (known after apply)

      + azure_active_directory_role_based_access_control {
          + azure_rbac_enabled = true
          + tenant_id          = "72f988bf-86f1-41af-91ab-2d7cd011db47"
        }

      + default_node_pool {
          + kubelet_disk_type    = (known after apply)
          + max_pods             = 50
          + name                 = "system"
          + node_count           = 1
          + node_labels          = (known after apply)
          + orchestrator_version = (known after apply)
          + os_disk_size_gb      = (known after apply)
          + os_disk_type         = "Ephemeral"
          + os_sku               = (known after apply)
          + pod_subnet_id        = (known after apply)
          + scale_down_mode      = "Delete"
          + type                 = "VirtualMachineScaleSets"
          + ultra_ssd_enabled    = false
          + vm_size              = "Standard_D8ds_v5"
          + vnet_subnet_id       = (known after apply)
          + workload_runtime     = (known after apply)
          + zones                = [
              + "1",
              + "2",
              + "3",
            ]

          + upgrade_settings {
              + drain_timeout_in_minutes      = 0
              + max_surge                     = "10%"
              + node_soak_duration_in_minutes = 0
            }
        }

      + identity {
          + identity_ids = (known after apply)
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "UserAssigned"
        }

      + kubelet_identity (known after apply)

      + network_profile {
          + dns_service_ip     = "10.2.0.10"
          + ip_versions        = (known after apply)
          + load_balancer_sku  = "standard"
          + network_data_plane = "azure"
          + network_mode       = (known after apply)
          + network_plugin     = "azure"
          + network_policy     = (known after apply)
          + outbound_type      = "userAssignedNATGateway"
          + pod_cidr           = (known after apply)
          + pod_cidrs          = (known after apply)
          + service_cidr       = "10.2.0.0/24"
          + service_cidrs      = (known after apply)

          + load_balancer_profile (known after apply)

          + nat_gateway_profile (known after apply)
        }

      + oms_agent {
          + log_analytics_workspace_id      = (known after apply)
          + msi_auth_for_monitoring_enabled = true
          + oms_agent_identity              = (known after apply)
        }

      + windows_profile (known after apply)

      + workload_autoscaler_profile {
          + keda_enabled                    = true
          + vertical_pod_autoscaler_enabled = true
        }
    }

  # module.aks_cluster.azurerm_kubernetes_cluster_node_pool.node_pool will be created
  + resource "azurerm_kubernetes_cluster_node_pool" "node_pool" {
      + id                    = (known after apply)
      + kubelet_disk_type     = (known after apply)
      + kubernetes_cluster_id = (known after apply)
      + max_pods              = 50
      + mode                  = "User"
      + name                  = "user"
      + node_count            = (known after apply)
      + node_labels           = (known after apply)
      + orchestrator_version  = "1.30.7"
      + os_disk_size_gb       = (known after apply)
      + os_disk_type          = "Ephemeral"
      + os_sku                = (known after apply)
      + os_type               = "Linux"
      + pod_subnet_id         = (known after apply)
      + priority              = "Regular"
      + scale_down_mode       = "Delete"
      + spot_max_price        = -1
      + ultra_ssd_enabled     = false
      + vm_size               = "Standard_D8ds_v5"
      + vnet_subnet_id        = (known after apply)
      + zones                 = [
          + "1",
          + "2",
          + "3",
        ]
    }

  # module.aks_cluster.azurerm_monitor_diagnostic_setting.settings will be created
  + resource "azurerm_monitor_diagnostic_setting" "settings" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "AksDiagnosticsSettings"
      + target_resource_id             = (known after apply)

      + enabled_log {
          + category       = "cluster-autoscaler"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "guard"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "kube-apiserver"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "kube-audit"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "kube-audit-admin"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "kube-controller-manager"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "kube-scheduler"
            # (1 unchanged attribute hidden)
        }

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # module.aks_cluster.azurerm_user_assigned_identity.aks_identity will be created
  + resource "azurerm_user_assigned_identity" "aks_identity" {
      + client_id           = (known after apply)
      + id                  = (known after apply)
      + location            = "westus3"
      + name                = "AksClusterIdentity"
      + principal_id        = (known after apply)
      + resource_group_name = (known after apply)
      + tenant_id           = (known after apply)
    }

  # module.bastion_host.azurerm_bastion_host.bastion_host will be created
  + resource "azurerm_bastion_host" "bastion_host" {
      + copy_paste_enabled        = true
      + dns_name                  = (known after apply)
      + file_copy_enabled         = false
      + id                        = (known after apply)
      + ip_connect_enabled        = false
      + kerberos_enabled          = false
      + location                  = "westus3"
      + name                      = "BastionHost"
      + resource_group_name       = (known after apply)
      + scale_units               = 2
      + session_recording_enabled = false
      + shareable_link_enabled    = false
      + sku                       = "Basic"
      + tunneling_enabled         = false

      + ip_configuration {
          + name                 = "configuration"
          + public_ip_address_id = (known after apply)
          + subnet_id            = (known after apply)
        }
    }

  # module.bastion_host.azurerm_monitor_diagnostic_setting.pip_settings will be created
  + resource "azurerm_monitor_diagnostic_setting" "pip_settings" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "BastionDdosDiagnosticsSettings"
      + target_resource_id             = (known after apply)

      + enabled_log {
          + category       = "DDoSMitigationFlowLogs"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "DDoSMitigationReports"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "DDoSProtectionNotifications"
            # (1 unchanged attribute hidden)
        }

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # module.bastion_host.azurerm_monitor_diagnostic_setting.settings will be created
  + resource "azurerm_monitor_diagnostic_setting" "settings" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "BastionDiagnosticsSettings"
      + target_resource_id             = (known after apply)

      + enabled_log {
          + category       = "BastionAuditLogs"
            # (1 unchanged attribute hidden)
        }

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # module.bastion_host.azurerm_public_ip.public_ip will be created
  + resource "azurerm_public_ip" "public_ip" {
      + allocation_method       = "Static"
      + ddos_protection_mode    = "VirtualNetworkInherited"
      + fqdn                    = (known after apply)
      + id                      = (known after apply)
      + idle_timeout_in_minutes = 4
      + ip_address              = (known after apply)
      + ip_version              = "IPv4"
      + location                = "westus3"
      + name                    = "BastionHostPublicIp"
      + resource_group_name     = (known after apply)
      + sku                     = "Standard"
      + sku_tier                = "Regional"
    }

  # module.blob_private_dns_zone.azurerm_private_dns_zone.private_dns_zone will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.blob.core.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = (known after apply)

      + soa_record (known after apply)
    }

  # module.blob_private_dns_zone.azurerm_private_dns_zone_virtual_network_link.link["AksVNet"] will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "link" {
      + id                    = (known after apply)
      + name                  = "link_to_aksvnet"
      + private_dns_zone_name = "privatelink.blob.core.windows.net"
      + registration_enabled  = false
      + resource_group_name   = (known after apply)
      + virtual_network_id    = (known after apply)
    }

  # module.blob_private_endpoint.azurerm_private_endpoint.private_endpoint will be created
  + resource "azurerm_private_endpoint" "private_endpoint" {
      + custom_dns_configs       = (known after apply)
      + id                       = (known after apply)
      + location                 = "westus3"
      + name                     = "BlobStoragePrivateEndpoint"
      + network_interface        = (known after apply)
      + private_dns_zone_configs = (known after apply)
      + resource_group_name      = (known after apply)
      + subnet_id                = (known after apply)

      + private_dns_zone_group {
          + id                   = (known after apply)
          + name                 = "BlobPrivateDnsZoneGroup"
          + private_dns_zone_ids = (known after apply)
        }

      + private_service_connection {
          + is_manual_connection           = false
          + name                           = "BlobStoragePrivateEndpointConnection"
          + private_connection_resource_id = (known after apply)
          + private_ip_address             = (known after apply)
          + subresource_names              = [
              + "blob",
            ]
        }
    }

  # module.container_registry.azurerm_container_registry.acr will be created
  + resource "azurerm_container_registry" "acr" {
      + admin_enabled                 = true
      + admin_password                = (sensitive value)
      + admin_username                = (known after apply)
      + encryption                    = (known after apply)
      + export_policy_enabled         = true
      + id                            = (known after apply)
      + location                      = "westus3"
      + login_server                  = (known after apply)
      + name                          = (known after apply)
      + network_rule_bypass_option    = "AzureServices"
      + network_rule_set              = (known after apply)
      + public_network_access_enabled = true
      + resource_group_name           = (known after apply)
      + sku                           = "Premium"
      + trust_policy_enabled          = false
      + zone_redundancy_enabled       = false

      + identity {
          + identity_ids = (known after apply)
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "UserAssigned"
        }
    }

  # module.container_registry.azurerm_monitor_diagnostic_setting.settings will be created
  + resource "azurerm_monitor_diagnostic_setting" "settings" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "ContainerDiagnosticsSettings"
      + target_resource_id             = (known after apply)

      + enabled_log {
          + category       = "ContainerRegistryLoginEvents"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "ContainerRegistryRepositoryEvents"
            # (1 unchanged attribute hidden)
        }

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # module.container_registry.azurerm_user_assigned_identity.acr_identity will be created
  + resource "azurerm_user_assigned_identity" "acr_identity" {
      + client_id           = (known after apply)
      + id                  = (known after apply)
      + location            = "westus3"
      + name                = (known after apply)
      + principal_id        = (known after apply)
      + resource_group_name = (known after apply)
      + tenant_id           = (known after apply)
    }

  # module.key_vault.azurerm_key_vault.key_vault will be created
  + resource "azurerm_key_vault" "key_vault" {
      + access_policy                   = (known after apply)
      + enable_rbac_authorization       = true
      + enabled_for_deployment          = true
      + enabled_for_disk_encryption     = true
      + enabled_for_template_deployment = true
      + id                              = (known after apply)
      + location                        = "westus3"
      + name                            = (known after apply)
      + public_network_access_enabled   = true
      + purge_protection_enabled        = false
      + resource_group_name             = (known after apply)
      + sku_name                        = "standard"
      + soft_delete_retention_days      = 30
      + tenant_id                       = "72f988bf-86f1-41af-91ab-2d7cd011db47"
      + vault_uri                       = (known after apply)

      + contact (known after apply)

      + network_acls {
          + bypass         = "AzureServices"
          + default_action = "Allow"
        }

      + timeouts {
          + delete = "60m"
        }
    }

  # module.key_vault.azurerm_monitor_diagnostic_setting.settings will be created
  + resource "azurerm_monitor_diagnostic_setting" "settings" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "KeyVaultDiagnosticsSettings"
      + target_resource_id             = (known after apply)

      + enabled_log {
          + category       = "AuditEvent"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "AzurePolicyEvaluationDetails"
            # (1 unchanged attribute hidden)
        }

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # module.key_vault_private_dns_zone.azurerm_private_dns_zone.private_dns_zone will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.vaultcore.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = (known after apply)

      + soa_record (known after apply)
    }

  # module.key_vault_private_dns_zone.azurerm_private_dns_zone_virtual_network_link.link["AksVNet"] will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "link" {
      + id                    = (known after apply)
      + name                  = "link_to_aksvnet"
      + private_dns_zone_name = "privatelink.vaultcore.azure.net"
      + registration_enabled  = false
      + resource_group_name   = (known after apply)
      + virtual_network_id    = (known after apply)
    }

  # module.key_vault_private_endpoint.azurerm_private_endpoint.private_endpoint will be created
  + resource "azurerm_private_endpoint" "private_endpoint" {
      + custom_dns_configs       = (known after apply)
      + id                       = (known after apply)
      + location                 = "westus3"
      + name                     = "VaultPrivateEndpoint"
      + network_interface        = (known after apply)
      + private_dns_zone_configs = (known after apply)
      + resource_group_name      = (known after apply)
      + subnet_id                = (known after apply)

      + private_dns_zone_group {
          + id                   = (known after apply)
          + name                 = "KeyVaultPrivateDnsZoneGroup"
          + private_dns_zone_ids = (known after apply)
        }

      + private_service_connection {
          + is_manual_connection           = false
          + name                           = "VaultPrivateEndpointConnection"
          + private_connection_resource_id = (known after apply)
          + private_ip_address             = (known after apply)
          + subresource_names              = [
              + "vault",
            ]
        }
    }

  # module.log_analytics_workspace.azurerm_log_analytics_solution.la_solution["ContainerInsights"] will be created
  + resource "azurerm_log_analytics_solution" "la_solution" {
      + id                    = (known after apply)
      + location              = "westus3"
      + resource_group_name   = (known after apply)
      + solution_name         = "ContainerInsights"
      + workspace_name        = "Workspace"
      + workspace_resource_id = (known after apply)

      + plan {
          + name      = (known after apply)
          + product   = "OMSGallery/ContainerInsights"
          + publisher = "Microsoft"
        }
    }

  # module.log_analytics_workspace.azurerm_log_analytics_workspace.log_analytics_workspace will be created
  + resource "azurerm_log_analytics_workspace" "log_analytics_workspace" {
      + allow_resource_only_permissions = true
      + daily_quota_gb                  = -1
      + id                              = (known after apply)
      + internet_ingestion_enabled      = true
      + internet_query_enabled          = true
      + local_authentication_disabled   = false
      + location                        = "westus3"
      + name                            = "Workspace"
      + primary_shared_key              = (sensitive value)
      + resource_group_name             = (known after apply)
      + retention_in_days               = 30
      + secondary_shared_key            = (sensitive value)
      + sku                             = "PerGB2018"
      + workspace_id                    = (known after apply)
    }

  # module.nat_gateway.azurerm_nat_gateway.nat_gateway will be created
  + resource "azurerm_nat_gateway" "nat_gateway" {
      + id                      = (known after apply)
      + idle_timeout_in_minutes = 4
      + location                = "westus3"
      + name                    = "NatGateway"
      + resource_group_name     = (known after apply)
      + resource_guid           = (known after apply)
      + sku_name                = "Standard"
      + zones                   = [
          + "1",
        ]
    }

  # module.nat_gateway.azurerm_nat_gateway_public_ip_association.nat_gategay_public_ip_association will be created
  + resource "azurerm_nat_gateway_public_ip_association" "nat_gategay_public_ip_association" {
      + id                   = (known after apply)
      + nat_gateway_id       = (known after apply)
      + public_ip_address_id = (known after apply)
    }

  # module.nat_gateway.azurerm_public_ip.nat_gategay_public_ip will be created
  + resource "azurerm_public_ip" "nat_gategay_public_ip" {
      + allocation_method       = "Static"
      + ddos_protection_mode    = "VirtualNetworkInherited"
      + fqdn                    = (known after apply)
      + id                      = (known after apply)
      + idle_timeout_in_minutes = 4
      + ip_address              = (known after apply)
      + ip_version              = "IPv4"
      + location                = "westus3"
      + name                    = "NatGatewayPublicIp"
      + resource_group_name     = (known after apply)
      + sku                     = "Standard"
      + sku_tier                = "Regional"
      + zones                   = [
          + "1",
        ]
    }

  # module.nat_gateway.azurerm_subnet_nat_gateway_association.nat-avd-sessionhosts["AzureBastionSubnet"] will be created
  + resource "azurerm_subnet_nat_gateway_association" "nat-avd-sessionhosts" {
      + id             = (known after apply)
      + nat_gateway_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.nat_gateway.azurerm_subnet_nat_gateway_association.nat-avd-sessionhosts["PodSubnet"] will be created
  + resource "azurerm_subnet_nat_gateway_association" "nat-avd-sessionhosts" {
      + id             = (known after apply)
      + nat_gateway_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.nat_gateway.azurerm_subnet_nat_gateway_association.nat-avd-sessionhosts["SystemSubnet"] will be created
  + resource "azurerm_subnet_nat_gateway_association" "nat-avd-sessionhosts" {
      + id             = (known after apply)
      + nat_gateway_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.nat_gateway.azurerm_subnet_nat_gateway_association.nat-avd-sessionhosts["UserSubnet"] will be created
  + resource "azurerm_subnet_nat_gateway_association" "nat-avd-sessionhosts" {
      + id             = (known after apply)
      + nat_gateway_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.nat_gateway.azurerm_subnet_nat_gateway_association.nat-avd-sessionhosts["VmSubnet"] will be created
  + resource "azurerm_subnet_nat_gateway_association" "nat-avd-sessionhosts" {
      + id             = (known after apply)
      + nat_gateway_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.openai.azurerm_cognitive_account.openai will be created
  + resource "azurerm_cognitive_account" "openai" {
      + custom_subdomain_name              = "magic8ball"
      + endpoint                           = (known after apply)
      + id                                 = (known after apply)
      + kind                               = "OpenAI"
      + local_auth_enabled                 = true
      + location                           = "westus3"
      + name                               = (known after apply)
      + outbound_network_access_restricted = false
      + primary_access_key                 = (sensitive value)
      + public_network_access_enabled      = true
      + resource_group_name                = (known after apply)
      + secondary_access_key               = (sensitive value)
      + sku_name                           = "S0"

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }
    }

  # module.openai.azurerm_cognitive_deployment.deployment["gpt-4"] will be created
  + resource "azurerm_cognitive_deployment" "deployment" {
      + cognitive_account_id   = (known after apply)
      + id                     = (known after apply)
      + name                   = "gpt-4"
      + version_upgrade_option = "OnceNewDefaultVersionAvailable"

      + model {
          + format  = "OpenAI"
          + name    = "gpt-4"
          + version = "turbo-2024-04-09"
        }

      + sku {
          + capacity = 1
          + name     = "Standard"
        }
    }

  # module.openai.azurerm_monitor_diagnostic_setting.settings will be created
  + resource "azurerm_monitor_diagnostic_setting" "settings" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "OpenAiDiagnosticsSettings"
      + target_resource_id             = (known after apply)

      + enabled_log {
          + category       = "Audit"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "RequestResponse"
            # (1 unchanged attribute hidden)
        }
      + enabled_log {
          + category       = "Trace"
            # (1 unchanged attribute hidden)
        }

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # module.openai_private_dns_zone.azurerm_private_dns_zone.private_dns_zone will be created
  + resource "azurerm_private_dns_zone" "private_dns_zone" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.openai.azure.com"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = (known after apply)

      + soa_record (known after apply)
    }

  # module.openai_private_dns_zone.azurerm_private_dns_zone_virtual_network_link.link["AksVNet"] will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "link" {
      + id                    = (known after apply)
      + name                  = "link_to_aksvnet"
      + private_dns_zone_name = "privatelink.openai.azure.com"
      + registration_enabled  = false
      + resource_group_name   = (known after apply)
      + virtual_network_id    = (known after apply)
    }

  # module.openai_private_endpoint.azurerm_private_endpoint.private_endpoint will be created
  + resource "azurerm_private_endpoint" "private_endpoint" {
      + custom_dns_configs       = (known after apply)
      + id                       = (known after apply)
      + location                 = "westus3"
      + name                     = "OpenAiPrivateEndpoint"
      + network_interface        = (known after apply)
      + private_dns_zone_configs = (known after apply)
      + resource_group_name      = (known after apply)
      + subnet_id                = (known after apply)

      + private_dns_zone_group {
          + id                   = (known after apply)
          + name                 = "AcrPrivateDnsZoneGroup"
          + private_dns_zone_ids = (known after apply)
        }

      + private_service_connection {
          + is_manual_connection           = false
          + name                           = "OpenAiPrivateEndpointConnection"
          + private_connection_resource_id = (known after apply)
          + private_ip_address             = (known after apply)
          + subresource_names              = [
              + "account",
            ]
        }
    }

  # module.storage_account.azurerm_storage_account.storage_account will be created
  + resource "azurerm_storage_account" "storage_account" {
      + access_tier                        = (known after apply)
      + account_kind                       = "StorageV2"
      + account_replication_type           = "LRS"
      + account_tier                       = "Standard"
      + allow_nested_items_to_be_public    = false
      + cross_tenant_replication_enabled   = false
      + default_to_oauth_authentication    = false
      + dns_endpoint_type                  = "Standard"
      + https_traffic_only_enabled         = true
      + id                                 = (known after apply)
      + infrastructure_encryption_enabled  = false
      + is_hns_enabled                     = false
      + large_file_share_enabled           = (known after apply)
      + local_user_enabled                 = true
      + location                           = "westus3"
      + min_tls_version                    = "TLS1_2"
      + name                               = (known after apply)
      + nfsv3_enabled                      = false
      + primary_access_key                 = (sensitive value)
      + primary_blob_connection_string     = (sensitive value)
      + primary_blob_endpoint              = (known after apply)
      + primary_blob_host                  = (known after apply)
      + primary_blob_internet_endpoint     = (known after apply)
      + primary_blob_internet_host         = (known after apply)
      + primary_blob_microsoft_endpoint    = (known after apply)
      + primary_blob_microsoft_host        = (known after apply)
      + primary_connection_string          = (sensitive value)
      + primary_dfs_endpoint               = (known after apply)
      + primary_dfs_host                   = (known after apply)
      + primary_dfs_internet_endpoint      = (known after apply)
      + primary_dfs_internet_host          = (known after apply)
      + primary_dfs_microsoft_endpoint     = (known after apply)
      + primary_dfs_microsoft_host         = (known after apply)
      + primary_file_endpoint              = (known after apply)
      + primary_file_host                  = (known after apply)
      + primary_file_internet_endpoint     = (known after apply)
      + primary_file_internet_host         = (known after apply)
      + primary_file_microsoft_endpoint    = (known after apply)
      + primary_file_microsoft_host        = (known after apply)
      + primary_location                   = (known after apply)
      + primary_queue_endpoint             = (known after apply)
      + primary_queue_host                 = (known after apply)
      + primary_queue_microsoft_endpoint   = (known after apply)
      + primary_queue_microsoft_host       = (known after apply)
      + primary_table_endpoint             = (known after apply)
      + primary_table_host                 = (known after apply)
      + primary_table_microsoft_endpoint   = (known after apply)
      + primary_table_microsoft_host       = (known after apply)
      + primary_web_endpoint               = (known after apply)
      + primary_web_host                   = (known after apply)
      + primary_web_internet_endpoint      = (known after apply)
      + primary_web_internet_host          = (known after apply)
      + primary_web_microsoft_endpoint     = (known after apply)
      + primary_web_microsoft_host         = (known after apply)
      + public_network_access_enabled      = true
      + queue_encryption_key_type          = "Service"
      + resource_group_name                = (known after apply)
      + secondary_access_key               = (sensitive value)
      + secondary_blob_connection_string   = (sensitive value)
      + secondary_blob_endpoint            = (known after apply)
      + secondary_blob_host                = (known after apply)
      + secondary_blob_internet_endpoint   = (known after apply)
      + secondary_blob_internet_host       = (known after apply)
      + secondary_blob_microsoft_endpoint  = (known after apply)
      + secondary_blob_microsoft_host      = (known after apply)
      + secondary_connection_string        = (sensitive value)
      + secondary_dfs_endpoint             = (known after apply)
      + secondary_dfs_host                 = (known after apply)
      + secondary_dfs_internet_endpoint    = (known after apply)
      + secondary_dfs_internet_host        = (known after apply)
      + secondary_dfs_microsoft_endpoint   = (known after apply)
      + secondary_dfs_microsoft_host       = (known after apply)
      + secondary_file_endpoint            = (known after apply)
      + secondary_file_host                = (known after apply)
      + secondary_file_internet_endpoint   = (known after apply)
      + secondary_file_internet_host       = (known after apply)
      + secondary_file_microsoft_endpoint  = (known after apply)
      + secondary_file_microsoft_host      = (known after apply)
      + secondary_location                 = (known after apply)
      + secondary_queue_endpoint           = (known after apply)
      + secondary_queue_host               = (known after apply)
      + secondary_queue_microsoft_endpoint = (known after apply)
      + secondary_queue_microsoft_host     = (known after apply)
      + secondary_table_endpoint           = (known after apply)
      + secondary_table_host               = (known after apply)
      + secondary_table_microsoft_endpoint = (known after apply)
      + secondary_table_microsoft_host     = (known after apply)
      + secondary_web_endpoint             = (known after apply)
      + secondary_web_host                 = (known after apply)
      + secondary_web_internet_endpoint    = (known after apply)
      + secondary_web_internet_host        = (known after apply)
      + secondary_web_microsoft_endpoint   = (known after apply)
      + secondary_web_microsoft_host       = (known after apply)
      + sftp_enabled                       = false
      + shared_access_key_enabled          = true
      + table_encryption_key_type          = "Service"

      + blob_properties (known after apply)

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }

      + network_rules (known after apply)

      + queue_properties (known after apply)

      + routing (known after apply)

      + share_properties (known after apply)

      + static_website (known after apply)
    }

  # module.virtual_network.azurerm_monitor_diagnostic_setting.settings will be created
  + resource "azurerm_monitor_diagnostic_setting" "settings" {
      + id                             = (known after apply)
      + log_analytics_destination_type = (known after apply)
      + log_analytics_workspace_id     = (known after apply)
      + name                           = "VirtualNetworkDiagnosticsSettings"
      + target_resource_id             = (known after apply)

      + metric {
          + category = "AllMetrics"
          + enabled  = true
        }
    }

  # module.virtual_network.azurerm_subnet.subnet["AzureBastionSubnet"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                              = [
          + "10.243.2.0/24",
        ]
      + default_outbound_access_enabled               = true
      + id                                            = (known after apply)
      + name                                          = "AzureBastionSubnet"
      + private_endpoint_network_policies             = "Enabled"
      + private_link_service_network_policies_enabled = false
      + resource_group_name                           = (known after apply)
      + virtual_network_name                          = "AksVNet"
    }

  # module.virtual_network.azurerm_subnet.subnet["PodSubnet"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                              = [
          + "10.242.0.0/16",
        ]
      + default_outbound_access_enabled               = true
      + id                                            = (known after apply)
      + name                                          = "PodSubnet"
      + private_endpoint_network_policies             = "Enabled"
      + private_link_service_network_policies_enabled = false
      + resource_group_name                           = (known after apply)
      + virtual_network_name                          = "AksVNet"

      + delegation {
          + name = "delegation"

          + service_delegation {
              + actions = [
                  + "Microsoft.Network/virtualNetworks/subnets/join/action",
                ]
              + name    = "Microsoft.ContainerService/managedClusters"
            }
        }
    }

  # module.virtual_network.azurerm_subnet.subnet["SystemSubnet"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                              = [
          + "10.240.0.0/16",
        ]
      + default_outbound_access_enabled               = true
      + id                                            = (known after apply)
      + name                                          = "SystemSubnet"
      + private_endpoint_network_policies             = "Enabled"
      + private_link_service_network_policies_enabled = false
      + resource_group_name                           = (known after apply)
      + virtual_network_name                          = "AksVNet"
    }

  # module.virtual_network.azurerm_subnet.subnet["UserSubnet"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                              = [
          + "10.241.0.0/16",
        ]
      + default_outbound_access_enabled               = true
      + id                                            = (known after apply)
      + name                                          = "UserSubnet"
      + private_endpoint_network_policies             = "Enabled"
      + private_link_service_network_policies_enabled = false
      + resource_group_name                           = (known after apply)
      + virtual_network_name                          = "AksVNet"
    }

  # module.virtual_network.azurerm_subnet.subnet["VmSubnet"] will be created
  + resource "azurerm_subnet" "subnet" {
      + address_prefixes                              = [
          + "10.243.1.0/24",
        ]
      + default_outbound_access_enabled               = true
      + id                                            = (known after apply)
      + name                                          = "VmSubnet"
      + private_endpoint_network_policies             = "Enabled"
      + private_link_service_network_policies_enabled = false
      + resource_group_name                           = (known after apply)
      + virtual_network_name                          = "AksVNet"
    }

  # module.virtual_network.azurerm_virtual_network.vnet will be created
  + resource "azurerm_virtual_network" "vnet" {
      + address_space                  = [
          + "10.0.0.0/8",
        ]
      + dns_servers                    = (known after apply)
      + guid                           = (known after apply)
      + id                             = (known after apply)
      + location                       = "westus3"
      + name                           = "AksVNet"
      + private_endpoint_vnet_policies = "Disabled"
      + resource_group_name            = (known after apply)
      + subnet                         = (known after apply)
    }